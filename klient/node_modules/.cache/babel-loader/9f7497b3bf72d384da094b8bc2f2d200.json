{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _linkify = require('./linkify');\n\nvar linkify = _interopRequireWildcard(_linkify);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar options = linkify.options;\nvar Options = options.Options; // Given a string, converts to an array of valid React components\n// (which may include strings)\n\nfunction stringToElements(str, opts) {\n  var tokens = linkify.tokenize(str);\n  var elements = [];\n  var linkId = 0;\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (token.type === 'nl' && opts.nl2br) {\n      elements.push(_react2.default.createElement('br', {\n        key: 'linkified-' + ++linkId\n      }));\n      continue;\n    } else if (!token.isLink || !opts.check(token)) {\n      // Regular text\n      elements.push(token.toString());\n      continue;\n    }\n\n    var _opts$resolve = opts.resolve(token),\n        formatted = _opts$resolve.formatted,\n        formattedHref = _opts$resolve.formattedHref,\n        tagName = _opts$resolve.tagName,\n        className = _opts$resolve.className,\n        target = _opts$resolve.target,\n        attributes = _opts$resolve.attributes;\n\n    var props = {\n      key: 'linkified-' + ++linkId,\n      href: formattedHref\n    };\n\n    if (className) {\n      props.className = className;\n    }\n\n    if (target) {\n      props.target = target;\n    } // Build up additional attributes\n    // Support for events via attributes hash\n\n\n    if (attributes) {\n      for (var attr in attributes) {\n        props[attr] = attributes[attr];\n      }\n    }\n\n    elements.push(_react2.default.createElement(tagName, props, formatted));\n  }\n\n  return elements;\n} // Recursively linkify the contents of the given React Element instance\n\n\nfunction linkifyReactElement(element, opts) {\n  var elementId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (_react2.default.Children.count(element.props.children) === 0) {\n    // No need to clone if the element had no children\n    return element;\n  }\n\n  var children = [];\n\n  _react2.default.Children.forEach(element.props.children, function (child) {\n    if (typeof child === 'string') {\n      // ensure that we always generate unique element IDs for keys\n      elementId = elementId + 1;\n      children.push.apply(children, stringToElements(child, opts));\n    } else if (_react2.default.isValidElement(child)) {\n      if (typeof child.type === 'string' && options.contains(opts.ignoreTags, child.type.toUpperCase())) {\n        // Don't linkify this element\n        children.push(child);\n      } else {\n        children.push(linkifyReactElement(child, opts, ++elementId));\n      }\n    } else {\n      // Unknown element type, just push\n      children.push(child);\n    }\n  }); // Set a default unique key, copy over remaining props\n\n\n  var newProps = {\n    key: 'linkified-element-' + elementId\n  };\n\n  for (var prop in element.props) {\n    newProps[prop] = element.props[prop];\n  }\n\n  return _react2.default.cloneElement(element, newProps, children);\n}\n\nvar Linkify = function (_React$Component) {\n  _inherits(Linkify, _React$Component);\n\n  function Linkify() {\n    _classCallCheck(this, Linkify);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Linkify.prototype.render = function render() {\n    // Copy over all non-linkify-specific props\n    var newProps = {\n      key: 'linkified-element-0'\n    };\n\n    for (var prop in this.props) {\n      if (prop !== 'options' && prop !== 'tagName') {\n        newProps[prop] = this.props[prop];\n      }\n    }\n\n    var opts = new Options(this.props.options);\n    var tagName = this.props.tagName || 'span';\n\n    var element = _react2.default.createElement(tagName, newProps);\n\n    return linkifyReactElement(element, opts, 0);\n  };\n\n  return Linkify;\n}(_react2.default.Component);\n\nexports.default = Linkify;","map":null,"metadata":{},"sourceType":"script"}